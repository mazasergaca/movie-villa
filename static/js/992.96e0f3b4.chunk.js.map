{"version":3,"file":"static/js/992.96e0f3b4.chunk.js","mappings":"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","sources":["api/services/movies.services.ts","pages/PersonDetails/PersonDetails.style.js","pages/PersonDetails/PersonDetails.tsx","api/hooks/usePersonDetails.ts","api/hooks/usePersonMovies.ts","api/hooks/usePersonImages.ts","services/slug.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'https://api.themoviedb.org/3';\n\nconst KEY = 'af82d7be8f57d00f4e04fac446f5a0d5';\n\naxios.defaults.baseURL = API_URL;\n\nexport const getTrendingMovies = async (page: number) => {\n  return await axios.get('/trending/all/day', {\n    params: {\n      api_key: KEY,\n      page,\n    },\n  });\n};\n\nexport const getPopularMovies = async (page: number) => {\n  return await axios('/movie/popular', {\n    params: {\n      api_key: KEY,\n      page,\n    },\n  });\n};\n\nexport const getPopularTv = async () => {\n  return await axios('/tv/popular', {\n    params: {\n      api_key: KEY,\n    },\n  });\n};\n\nexport const getRatedMovies = async (page: number) => {\n  return await axios('/movie/top_rated', {\n    params: {\n      api_key: KEY,\n      page,\n    },\n  });\n};\n\nexport const getUpcomingMovie = async (page: number) => {\n  return await axios('/movie/upcoming', {\n    params: {\n      api_key: KEY,\n      page,\n    },\n  });\n};\n\nexport const getMoviesByName = async (name: string, page: number) => {\n  return await axios('/search/movie', {\n    params: {\n      api_key: KEY,\n      query: name,\n      page,\n    },\n  });\n};\n\nexport const getMovieById = async (id: string) => {\n  return await axios(`/movie/${id}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n};\n\nexport const getMovieVideoById = async (id: string) => {\n  return await axios(`/movie/${id}/videos`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n};\n\nexport const getMovieSimilar = async (id: string) => {\n  return await axios(`/movie/${id}/similar`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n};\n\nexport const getMovieCast = async (id: string) => {\n  return await axios(`/movie/${id}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n};\n\nexport const getPersonDetails = async (id: string) => {\n  return await axios(`/person/${id}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n};\n\nexport const getPersonMovies = async (id: string) => {\n  return await axios(`/person/${id}/movie_credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n};\n\nexport const getPersonImages = async (id: string) => {\n  return await axios(`/person/${id}/images`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin-top: 40px;\n  display: flex;\n`;\n\nexport const WrapperInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const WrapperBiography = styled.div`\n  padding-left: 20px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Avatar = styled.div`\n  width: 300px;\n  height: 450px;\n  margin-bottom: 30px;\n\n  overflow: hidden;\n  border-radius: 10px;\n  background-color: #111;\n`;\n\nexport const Name = styled.span`\n  margin-bottom: 30px;\n\n  font-size: 36px;\n  font-family: 'DM Sans';\n`;\n\nexport const TitleInfo = styled.p`\n  margin-bottom: 22px;\n\n  font-size: 20px;\n`;\n\nexport const InfoName = styled.span`\n  margin-bottom: 5px;\n\n  font-weight: 700;\n  font-size: 16px;\n  text-decoration: underline;\n`;\n\nexport const InfoValue = styled.span`\n  font-size: 16px;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const ButtonShowMore = styled.button`\n  text-decoration: underline;\n  border: none;\n  background-color: transparent;\n  color: #ff3b5f;\n`;\n\nexport const WrapperSlider = styled.div`\n  width: 700px;\n  margin: 40px auto 0;\n\n  // classes from the react-slick library\n  & .slick-prev:before {\n    content: '❮';\n  }\n\n  & .slick-next:before {\n    content: '❯';\n  }\n  & .slick-arrow {\n    top: 40%;\n  }\n`;\nexport const Item = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Poster = styled.div`\n  width: 120px;\n  height: 200px;\n\n  overflow: hidden;\n  border-radius: 10px;\n`;\n\nexport const TitleMovie = styled.span`\n  font-size: 14px;\n  text-align: center;\n\n  color: #fff;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Slider from 'react-slick';\nimport { Link } from 'react-router-dom';\nimport slugify from 'slugify';\nimport { Container } from '@mui/material';\n\nimport makeIdFromSlug from 'services/slug.ts';\nimport { usePersonDetails } from 'api/hooks/usePersonDetails.ts';\nimport { usePersonMovies } from 'api/hooks/usePersonMovies.ts';\nimport { usePersonImages } from 'api/hooks/usePersonImages.ts';\n\nimport {\n  Wrapper,\n  WrapperInfo,\n  WrapperBiography,\n  Name,\n  Avatar,\n  TitleInfo,\n  InfoName,\n  InfoValue,\n  ButtonShowMore,\n  WrapperSlider,\n  Item,\n  Poster,\n  TitleMovie,\n} from './PersonDetails.style';\n\n// settings for react-slick\nconst settings = {\n  dots: true,\n  infinite: false,\n  speed: 500,\n  slidesToScroll: 1,\n  slidesToShow: 5,\n  swipeToSlide: true,\n};\n//make slug for pathname\nconst makeSlug = (string: string) => slugify(string, { lower: true });\n\nconst PersonDetails = () => {\n  const [showMore, setShowMore] = useState(false);\n\n  const location = useLocation();\n  const id = makeIdFromSlug(location.pathname);\n\n  const { personDetails } = usePersonDetails(id);\n  const { personMovies } = usePersonMovies(id);\n  const { personImages } = usePersonImages(id);\n\n  console.log(personImages);\n\n  useEffect(() => window.scrollTo(0, 0));\n\n  const handleClickBtnMore = () => setShowMore(!showMore);\n\n  return (\n    <Container>\n      <Wrapper>\n        {personDetails && (\n          <>\n            <WrapperInfo>\n              <Avatar>\n                <img\n                  src={`https://image.tmdb.org/t/p/w500/${personDetails.data.profile_path}`}\n                  alt={personDetails.data.name}\n                  width=\"100%\"\n                />\n              </Avatar>\n              <TitleInfo>Personal Info</TitleInfo>\n              <InfoName>Known For</InfoName>\n              <InfoValue>{personDetails.data.known_for_department}</InfoValue>\n              <InfoName>Gender</InfoName>\n              <InfoValue>\n                {personDetails.data.gender === '1' ? 'Female' : 'Male'}\n              </InfoValue>\n              <InfoName>Born</InfoName>\n              <InfoValue>{personDetails.data.birthday}</InfoValue>\n              <InfoValue>{personDetails.data.place_of_birth}</InfoValue>\n              {personDetails.data.deathday && (\n                <>\n                  <InfoName>Died</InfoName>\n                  <InfoValue>{personDetails.data.deathday}</InfoValue>\n                </>\n              )}\n              <InfoName>Also Known As</InfoName>\n\n              {personDetails.data.also_known_as.map((name, index) => (\n                <InfoValue key={index}>{name}</InfoValue>\n              ))}\n            </WrapperInfo>\n            <WrapperBiography>\n              <Name>{personDetails.data.name}</Name>\n              <TitleInfo>Biography</TitleInfo>\n              <InfoValue>\n                {showMore\n                  ? personDetails.data.biography\n                  : personDetails.data.biography.substring(0, 250)}{' '}\n                <ButtonShowMore onClick={handleClickBtnMore}>\n                  {showMore ? 'Show less' : 'Show more'}\n                </ButtonShowMore>\n              </InfoValue>\n              <WrapperSlider>\n                <TitleInfo>Known For</TitleInfo>\n                <Slider {...settings}>\n                  {personMovies &&\n                    personMovies.data.cast.map(movie => (\n                      <div key={movie.id}>\n                        <Link\n                          to={{\n                            pathname: `/movies/all/${makeSlug(\n                              movie.title || movie.original_title\n                            )}-${movie.id}`,\n                          }}\n                        >\n                          <Item>\n                            <Poster>\n                              <img\n                                src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n                                alt={movie.title || movie.original_title}\n                                width=\"100%\"\n                              />\n                            </Poster>\n                            <TitleMovie>\n                              {movie.title || movie.original_title}\n                            </TitleMovie>\n                          </Item>\n                        </Link>\n                      </div>\n                    ))}\n                </Slider>\n                {personImages && <></>}\n              </WrapperSlider>\n            </WrapperBiography>\n          </>\n        )}\n      </Wrapper>\n    </Container>\n  );\n};\n\nexport default PersonDetails;\n","import { useQuery } from 'react-query';\nimport { toast } from 'react-toastify';\nimport { getPersonDetails } from 'api/services/movies.services.ts';\n\nexport const usePersonDetails = id => {\n  const { data: personDetails, refetch: refetchPersonDetails } = useQuery(\n    'person details',\n    () => getPersonDetails(id),\n    {\n      onError: (error: any) => {\n        toast.error(error.message);\n      },\n    }\n  );\n\n  return { personDetails, refetchPersonDetails };\n};\n","import { useQuery } from 'react-query';\nimport { toast } from 'react-toastify';\nimport { getPersonMovies } from 'api/services/movies.services.ts';\n\nexport const usePersonMovies = (id: string) => {\n  const { data: personMovies, refetch: refetchPersonMovies } = useQuery(\n    'person movies',\n    () => getPersonMovies(id),\n    {\n      onError: (error: any) => {\n        toast.error(error.message);\n      },\n    }\n  );\n  return { personMovies, refetchPersonMovies };\n};\n","import { useQuery } from 'react-query';\nimport { toast } from 'react-toastify';\nimport { getPersonImages } from 'api/services/movies.services.ts';\n\nexport const usePersonImages = (id: string) => {\n  const { data: personImages } = useQuery(\n    'person images',\n    () => getPersonImages(id),\n    {\n      onError: (error: any) => {\n        toast.error(error.message);\n      },\n    }\n  );\n\n  return { personImages };\n};\n","export default function makeIdFromSlug(slug) {\n  return slug.match(/[a-z0-9]+$/)[0];\n}\n"],"names":["KEY","axios","getTrendingMovies","page","params","api_key","getPopularMovies","getPopularTv","getRatedMovies","getUpcomingMovie","getMoviesByName","name","query","getMovieById","id","getMovieVideoById","getMovieSimilar","getMovieCast","getPersonDetails","getPersonMovies","getPersonImages","Wrapper","styled","WrapperInfo","WrapperBiography","Avatar","Name","TitleInfo","InfoName","InfoValue","ButtonShowMore","WrapperSlider","Item","Poster","TitleMovie","settings","dots","infinite","speed","slidesToScroll","slidesToShow","swipeToSlide","useState","showMore","setShowMore","location","useLocation","makeIdFromSlug","pathname","useQuery","onError","error","toast","message","personDetails","data","refetchPersonDetails","refetch","usePersonDetails","personMovies","refetchPersonMovies","usePersonMovies","personImages","usePersonImages","console","log","useEffect","window","scrollTo","Container","src","profile_path","alt","width","known_for_department","gender","birthday","place_of_birth","deathday","also_known_as","map","index","biography","substring","onClick","cast","movie","to","string","title","original_title","slugify","lower","poster_path","slug","match"],"sourceRoot":""}